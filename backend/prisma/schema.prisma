// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
	provider = "prisma-client-js"
}

datasource db {
	provider = "postgresql"
	url      = env("DATABASE_URL")
}

model User {
	id						Int @id @unique
	createdAt				DateTime @default(now())
	updatedAt				DateTime @updatedAt

	email					String @unique

	// UserProfile
	name					String
	nickname				String @unique
	image					String?
	money					Int @default(0)
	avatar					Int @default(0)	//Avatar in The Lobby

	// Info Ping Pong
	level					Int @default(1)
	xp						Int @default(0)
	color					String @default("blue") // this sets the color for player name, player ball and player padel
	tableColorEquipped		String @default("")
	tableSkinEquipped		String @default("")
	paddleSkinEquipped		String @default("")
	tableSkinsOwned			String[]
	paddleSkinsOwned		String[]

	status					UserStatus @default(OFFLINE) // Offline, In Game, Online

	// Friends
	sentFriendRequests		FriendRequest[] @relation("FriendShipRequestor")
	receivedFriendRequests	FriendRequest[] @relation("FriendShipRequestee")
	friends					User[] @relation("Friends")
	friendsOf				User[] @relation("Friends")

	// Game
	games					Game[]
	wonGames				Game[] @relation("WonGames")
	lostGames				Game[] @relation("LostGames")

	// Blocked Users
	blockedUsers			Blocklist[] @relation("BlockingUsers")
	blockingUsers			Blocklist[] @relation("BlockedUsers")

	// Chat
	messages				Message[]
	channels				ChannelUser[]
	ownedChannels			Channel[] @relation("ChannelOwner")
	bannedFromChannels		Channel[] @relation("ChannelBan")

	twoFASecret				String?
	isTwoFAEnabled			Boolean @default(false)

	@@unique([id, nickname])
	@@map("users")
}

model FriendRequest {
	id						String @unique @default(uuid())
	createdAt				DateTime @default(now())
	updatedAt				DateTime @updatedAt

	requestorId				Int
	requestorName			String
	requesteeId				Int
	requesteeName			String
	status					FriendReqStatus @default(PENDING) // Pending, Accepted, Rejected, Blocked

	requestor				User @relation(fields: [requestorId, requestorName], references: [id, nickname], name: "FriendShipRequestor")
	requestee				User @relation(fields: [requesteeId, requesteeName], references: [id, nickname], name: "FriendShipRequestee")

	@@id([requestorId, requesteeId])
	@@index([requestorId, requesteeId], name: "friendship_index")
	@@map("friend_requests")
}

model Blocklist {
	id						Int @default(autoincrement())
	blockerId				Int
	blocker					User @relation("BlockingUsers", fields: [blockerId], references: [id])
	blockedId				Int
	blocked					User @relation("BlockedUsers", fields: [blockedId], references: [id])
	createdAt				DateTime @default(now())
	@@id([blockerId, blockedId])
}

model Message {
	id						Int @id @default(autoincrement())
	content					String
	userId					Int
	user					User @relation(fields: [userId], references: [id])
	channelId				Int
	channel					Channel @relation(fields: [channelId], references: [id])
	createdAt				DateTime @default(now())

	@@map("messages")
}

model Channel {
	id						Int @id @default(autoincrement())
	name					String? @unique
	avatar					String?
	hash					String?
	messages				Message[]
	users					ChannelUser[]
	ownerId					Int?
	owner					User? @relation("ChannelOwner", fields: [ownerId], references: [id])
	type					ChannelType // Public, Private, Protected, DM
	banList					User[] @relation("ChannelBan")

	@@map("channels")
}

model ChannelUser {
	userId					Int
	user					User @relation(fields: [userId], references: [id])
	channelId				Int
	channel					Channel @relation(fields: [channelId], references: [id])
	isMuted					Boolean @default(false)
	isAdmin					Boolean @default(false)
	@@id([userId, channelId])
	@@map("channel_users")
}

enum ChannelType {
	PUBLIC
	PRIVATE
	PROTECTED
	DM
}

model Game {
	id						String @id @unique @default(uuid())
	createdAt				DateTime @default(now())
	updatedAt				DateTime @updatedAt

	status					GameStatus @default(NOT_STARTED) // 0: not started, 1: started, 2: ended
	players					User[] 


	winnerScore				Int @default(0)
	winnerId				Int?
	winnerNickname			String?
	winner					User? @relation("WonGames", fields: [winnerId, winnerNickname], references: [id, nickname])

	loserScore				Int @default(0)
	loserId					Int?
	loserNickname			String?
	loser					User? @relation("LostGames", fields: [loserId, loserNickname], references: [id, nickname])

	gameType				GameType // Public, Private, Protected

	@@map("games")
}

enum FriendReqStatus {
	PENDING
	ACCEPTED
	REJECTED
	BLOCKED
	CANCELLED
}

enum UserStatus {
	OFFLINE
	IN_GAME
	ONLINE
}

enum GameStatus {
	NOT_STARTED
	IN_PROGESS
	FINISHED
}

// !TODO: needs confirmation
enum GameType {
	PUBLIC
	PRIVATE
	PROTECTED
	DM
}
